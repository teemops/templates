AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy Teemops ECS Cluster and ALB
Parameters:
  AppId:
    Description: Teemops App ID
    Type: String
  AppName:
    Description: Teemops App Name
    Type: String
  ALBSubnets:
    Description: Subnets
    Type: List<AWS::EC2::Subnet::Id>
  VPC:
    Description: VPCId
    Type: String
  SSLArn:
    Description: Amazon Certificate ARN
    Type: String
    Default: 'none'
Conditions:
  ConditionSSL: !Not [!Equals [!Ref SSLArn, 'none']]
Resources:
  # TopsECSServiceRole:
  #   Type: 'AWS::IAM::ServiceLinkedRole'
  #   Properties:
  #     AWSServiceName: ecs.amazonaws.com
  #     Description: ECS SLR
  TopsECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  [
                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                    "elasticloadbalancing:DeregisterTargets",
                    "elasticloadbalancing:Describe*",
                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                    "elasticloadbalancing:RegisterTargets",
                    "ec2:Describe*",
                    "ec2:AuthorizeSecurityGroupIngress",
                  ]
                Resource: "*"
  
  TopsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ["", ["teemops-", !Ref AppId, '-', !Ref AppName]]
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
  TopsALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '120'
      Name: !Join ["", ["teemops-", !Ref AppId, '-', !Ref AppName]]
      Subnets: !Ref ALBSubnets
      SecurityGroups:
        - !Ref TopsALBSG
  TopsALBListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - TopsALB
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'TopsTargetGroup'
          Type: 'forward'
      LoadBalancerArn: !Ref 'TopsALB'
      Port: 80
      Protocol: HTTP
  TopsALBListenerHTTPS:
    Condition: ConditionSSL
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - TopsALB
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'TopsTargetGroup'
          Type: 'forward'
      LoadBalancerArn: !Ref 'TopsALB'
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref SSLArn
  TopsALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTPS access and HTTP from the load balancer only
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
  TopsTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Join ["", ["teemops-", !Ref AppId, '-', !Ref AppName]]
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      

  
